<!DOCTYPE html>
<html>

<head>
    <meta charset="UTF-8">
    <title>solidSpoon's Blog</title>
    {{> styles}}
</head>

<body>
    {{> header}}
    <main class="main-content">
        <div class="header">
            <h1>solidSpoon</h1>
            <div class="motto">方向是比速度更重要的追求</div>
            <div class="description">
                这里是我的个人博客，记录技术、生活和思考。欢迎交流讨论。
            </div>
        </div>
        <div class="search-container">
            <input type="text" class="search-input" placeholder="搜索文章..." id="searchInput">
        </div>
        <div class="posts" id="postsContainer">
            {{#each posts}}
            <div class="post-item" data-title="{{this.title}}" data-content="{{this.searchContent}}">
                <h2><a href="{{this.slug}}.html">{{this.title}}</a></h2>
                <div class="post-date">{{this.date}}</div>
                <div class="excerpt">{{this.excerpt}}</div>
            </div>
            {{/each}}
        </div>
    </main>
    {{> footer}}
    <script>
        // 准备搜索数据
        const posts = Array.from(document.querySelectorAll('.post-item')).map((item, idx) => ({
            id: idx,
            title: item.dataset.title,
            content: item.dataset.content,
            element: item,
            originalIndex: idx  // 保存原始顺序
        }));

        // 保存原始顺序
        const originalOrder = posts.map(post => post.element);

        // 搜索功能 - 增强的grep风格搜索
        const searchInput = document.getElementById('searchInput');
        const postsContainer = document.getElementById('postsContainer');

        searchInput.addEventListener('input', (e) => {
            const query = e.target.value.trim().toLowerCase();

            // 如果搜索框为空，恢复原始顺序和显示所有文章
            if (query.length < 2) {
                posts.forEach(post => {
                    post.element.classList.remove('search-highlight');
                    post.element.style.borderLeftWidth = '';
                    post.element.style.borderLeftColor = '';
                });

                originalOrder.forEach(element => {
                    postsContainer.appendChild(element);
                });

                return;
            }

            // 1. 整体搜索词
            const fullQuery = query;
            
            // 2. 分词搜索 - 按空格分割
            const queryTerms = query.split(/\s+/).filter(term => term.length >= 2);
            
            // 计算每篇文章的匹配分数
            const scoredPosts = posts.map(post => {
                const lowerTitle = post.title.toLowerCase();
                const lowerContent = post.content.toLowerCase();
                let score = 0;
                
                // 完整查询匹配得分（优先级最高）
                if (lowerTitle.includes(fullQuery)) {
                    score += 100; // 标题中完整匹配得高分
                }
                if (lowerContent.includes(fullQuery)) {
                    score += 50;  // 内容中完整匹配得分
                }
                
                // 分词匹配得分
                queryTerms.forEach(term => {
                    if (lowerTitle.includes(term)) {
                        score += 20; // 标题中有单个词匹配
                    }
                    if (lowerContent.includes(term)) {
                        score += 10; // 内容中有单个词匹配
                    }
                });
                
                return {
                    post,
                    score
                };
            });
            
            // 分离匹配和不匹配的文章
            const matchedPosts = scoredPosts
                .filter(item => item.score > 0)
                .sort((a, b) => b.score - a.score); // 匹配的按分数排序
                
            const unmatchedPosts = scoredPosts
                .filter(item => item.score === 0)
                .sort((a, b) => a.post.originalIndex - b.post.originalIndex); // 不匹配的按原始顺序排序
            
            // 更新文章样式
            posts.forEach(post => {
                const matchResult = scoredPosts.find(item => item.post.id === post.id);
                if (matchResult && matchResult.score > 0) {
                    // 匹配文章，添加高亮
                    post.element.classList.add('search-highlight');
                    // 添加额外的高亮强度，与分数相关
                    const intensity = Math.min(100, matchResult.score) / 100;
                    post.element.style.borderLeftWidth = `${3 + intensity * 4}px`;
                    post.element.style.borderLeftColor = '#0969da';
                } else {
                    // 不匹配文章，移除高亮
                    post.element.classList.remove('search-highlight');
                    post.element.style.borderLeftWidth = '';
                    post.element.style.borderLeftColor = '';
                }
            });
            
            // 先添加匹配的文章，后添加不匹配的文章
            const sortedResults = [...matchedPosts, ...unmatchedPosts];
            sortedResults.forEach(item => {
                postsContainer.appendChild(item.post.element);
            });
        });
    </script>
</body>

</html>
