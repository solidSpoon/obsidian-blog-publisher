<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <title>solidSpoon's Blog</title>
    <script src="https://cdn.jsdelivr.net/npm/fuse.js@6.6.2"></script>
    {{> styles}}
</head>
<body>
    {{> header}}
    <main class="main-content">
        <div class="header">
            <h1>solidSpoon</h1>
            <div class="motto">方向是比速度更重要的追求</div>
            <div class="description">
                这里是我的个人博客，记录技术、生活和思考。欢迎交流讨论。
            </div>
        </div>
        <div class="search-container">
            <input type="text" class="search-input" placeholder="搜索文章..." id="searchInput">
        </div>
        <div class="posts" id="postsContainer">
            {{#each posts}}
            <div class="post-item" data-title="{{this.title}}" data-content="{{this.searchContent}}">
                <h2><a href="{{this.slug}}.html">{{this.title}}</a></h2>
                <div class="post-date">{{this.date}}</div>
                <div class="excerpt">{{this.excerpt}}</div>
            </div>
            {{/each}}
        </div>
    </main>
    {{> footer}}
<script>
    // 初始化 Fuse.js
    const posts = Array.from(document.querySelectorAll('.post-item')).map(item => ({
        title: item.dataset.title,
        content: item.dataset.content,
        element: item
    }));

    // 保存原始顺序，用于重置排序
    const originalOrder = posts.map(post => post.element);

    const fuse = new Fuse(posts, {
        keys: [
            { name: 'title', weight: 0.7 },
            { name: 'content', weight: 0.3 }
        ],
        threshold: 0.5,
        minMatchCharLength: 2,
        includeScore: true  // 包含分数以便排序
    });

    // 搜索功能
    const searchInput = document.getElementById('searchInput');
    const postsContainer = document.getElementById('postsContainer');

    searchInput.addEventListener('input', (e) => {
        const query = e.target.value.trim();
        
        // 如果搜索框为空，恢复原始顺序
        if (query.length < 2) {
            // 恢复所有文章并移除高亮
            posts.forEach(post => {
                post.element.style.display = 'block';
                post.element.classList.remove('search-highlight');
            });
            
            // 恢复原始顺序
            originalOrder.forEach(element => {
                postsContainer.appendChild(element);
            });
            
            return;
        }
        
        // 执行搜索
        const results = fuse.search(query);
        console.log(query);
        console.log(JSON.stringify(results));
        
        // 创建排序映射：先匹配的，再未匹配的
        const sortedElements = [];
        
        // 先添加匹配的结果（按相关性排序）
        results.forEach(result => {
            const element = result.item.element;
            element.classList.add('search-highlight'); // 添加高亮类
            sortedElements.push(element);
        });
        
        // 然后添加未匹配的结果（保持原始顺序）
        posts.forEach(post => {
            const isMatched = results.some(result => result.item.element === post.element);
            if (!isMatched) {
                post.element.classList.remove('search-highlight');
                sortedElements.push(post.element);
            }
        });
        
        // 重新排序元素
        sortedElements.forEach(element => {
            postsContainer.appendChild(element);
        });
    });
</script>

</body>
</html> 